pipeline {
    agent any

    environment {
        SSH_CREDENTIALS_ID = 'azure_vm_key' // Assurez-vous que c'est bien l'ID de votre Credential SSH Jenkins
        APP_REPO_URL = 'https://github.com/AzizSoftware/SSAFT_DEPLOYMENT_PIPELINE.git'
        // Assurez-vous que les credentials Azure sont configurés avec ces IDs dans Jenkins
        AZURE_SUB_ID_CRED = 'azure-subscription-id'
        AZURE_CLIENT_ID_CRED = 'azure-client-id'
        AZURE_CLIENT_SECRET_CRED = 'azure-client-secret'
        AZURE_TENANT_ID_CRED = 'azure-tenant-id'
    }

    stages {

        stage('Checkout Repo') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: env.APP_REPO_URL, credentialsId: 'github-pat-azizsoftware']], // <--- TRÈS IMPORTANT : Utilisez l'ID de votre Personal Access Token GitHub ici
                        doNotPoll: true
                    ])
                }
            }
        }

        stage('Terraform Init and Apply') {
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: env.AZURE_SUB_ID_CRED, variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: env.AZURE_CLIENT_ID_CRED, variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: env.AZURE_CLIENT_SECRET_CRED, variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: env.AZURE_TENANT_ID_CRED, variable: 'ARM_TENANT_ID')
                    ]) {
                        sh '''
                            # Optionnel : Détruire l'ancienne infra avant de recréer (décommenter si vous voulez un clean slate à chaque fois)
                            # terraform destroy -auto-approve \
                            #   -var="subscription_id=$ARM_SUBSCRIPTION_ID" \
                            #   -var="client_id=$ARM_CLIENT_ID" \
                            #   -var="client_secret=$ARM_CLIENT_SECRET" \
                            #   -var="tenant_id=$ARM_TENANT_ID" || true # '|| true' pour ne pas échouer si rien à détruire

                            terraform init -reconfigure # Reconfigure au cas où le backend change
                            terraform plan \
                                -var="subscription_id=$ARM_SUBSCRIPTION_ID" \
                                -var="client_id=$ARM_CLIENT_ID" \
                                -var="client_secret=$ARM_CLIENT_SECRET" \
                                -var="tenant_id=$ARM_TENANT_ID"

                            terraform apply -auto-approve \
                                -var="subscription_id=$ARM_SUBSCRIPTION_ID" \
                                -var="client_id=$ARM_CLIENT_ID" \
                                -var="client_secret=$ARM_CLIENT_SECRET" \
                                -var="tenant_id=$ARM_TENANT_ID"
                        '''
                    }
                }
            }
        }

        // --- STAGE CRUCIALE POUR RÉSOUDRE L'ERREUR "Host key verification failed" ---
        stage('Wait for VM & SSH Readiness') {
            steps {
                script {
                    def vmIp = sh(script: "cd terraform && terraform output -raw public_ip_address", returnStdout: true).trim()
                    echo "VM IP for SSH: ${vmIp}"

                    // --- NOUVELLES LIGNES À AJOUTER ---
                    // Assurez-vous que le répertoire .ssh et le fichier known_hosts existent avec les bonnes permissions
                    sh """
                        mkdir -p ~/.ssh       # Crée le répertoire .ssh s'il n'existe pas (-p)
                        chmod 700 ~/.ssh      # Donne les permissions rwx seulement à l'utilisateur
                        touch ~/.ssh/known_hosts # Crée le fichier known_hosts s'il n'existe pas
                        chmod 600 ~/.ssh/known_hosts # Donne les permissions rw seulement à l'utilisateur pour le fichier
                    """
                    // --- FIN DES NOUVELLES LIGNES ---

                    // Maintenant, supprimer l'ancienne clé d'hôte fonctionnera
                    sh "ssh-keygen -R ${vmIp}"

                    echo "Waiting for SSH on ${vmIp}:22 to be available..."
                    sh '''
                        count=0
                        while ! nc -z -v -w 10 ''' + vmIp + ''' 22; do
                            echo "Still waiting for SSH to be available on ''' + vmIp + '''..."
                            sleep 5
                            count=$((count+1))
                            if [ $count -ge 18 ]; then
                                echo "SSH connection timed out after 90 seconds. Aborting."
                                exit 1
                            fi
                        done
                        echo "SSH is now open on ''' + vmIp + '''!"
                    '''
                }
            }
        }
        stage('Ansible Deploy') {
            steps {
                dir('ansible') {
                    // Invoque la clé privée SSH depuis les identifiants Jenkins
                    withCredentials([sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, keyFileVariable: 'ANSIBLE_PRIVATE_KEY_FILE_PATH')]) {
                        script {
                            // Récupérer l'IP de la VM et l'admin_username depuis les outputs Terraform
                            // Assurez-vous que ces outputs existent dans votre outputs.tf
                            def vmIp = sh(script: "cd ../terraform && terraform output -raw public_ip_address", returnStdout: true).trim()
                            def vmAdminUsername = sh(script: "cd ../terraform && terraform output -raw vm_admin_username", returnStdout: true).trim()

                            // Générer le fichier inventory.ini DYNAMIQUEMENT pour Ansible
                            // L'option `--private-key` d'Ansible est utilisée, donc pas besoin de la clé dans l'inventaire
                            sh """
                                echo "[webservers]" > inventory.ini
                                echo "azure_vm ansible_host=${vmIp} ansible_user=${vmAdminUsername}" >> inventory.ini
                                echo "" >> inventory.ini
                                echo "[all:vars]" >> inventory.ini
                                echo "ansible_python_interpreter=/usr/bin/python3" >> inventory.ini
                                echo "Generated Ansible inventory for VM at: ${vmIp}"
                            """
                            // Exécuter le playbook Ansible de manière plus sécurisée
                            // Utilisation de 'withEnv' pour passer le secret comme variable d'environnement shell masquée
                            withEnv(["ANSIBLE_KEY_VAR=${ANSIBLE_PRIVATE_KEY_FILE_PATH}"]) { // <--- NOUVELLE LIGNE : Utilise withEnv
                                sh """
                                    ansible-playbook deploy_app.yml \\
                                      -i inventory.ini \\
                                      --private-key=\${ANSIBLE_KEY_VAR} \\ # <--- CHANGEMENT ICI : Utilise \${ANSIBLE_KEY_VAR}
                                      -e app_repo_url=${env.APP_REPO_URL}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Smoke Test') {
            steps {
                dir('terraform') {
                    script {
                        def ip = sh(script: "terraform output -raw public_ip_address", returnStdout: true).trim()
                        echo "Checking application health on http://${ip}:4000..."
                        sh "curl --fail http://${ip}:4000" // Utilisez --fail pour que curl retourne une erreur si la requête HTTP échoue
                    }
                }
            }
        }
    }
}
