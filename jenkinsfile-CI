pipeline {
    agent any

    environment {
        NODEJS_VERSION = 'node-18'
        TEST_PIPELINE = 'SSAFT_TEST_PIPELINE'
        SSH_CREDENTIALS_ID = 'azure_vm_key'
        APP_REPO_URL = 'https://github.com/AzizSoftware/SSAFT_DEPLOYMENT_PIPELINE.git'
    }

    tools {
        nodejs "${env.NODEJS_VERSION}"
    }

    stages {
        stage('Checkout Repo') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[
                            url: env.APP_REPO_URL,
                            credentialsId: 'github-pat-azizsoftware'
                        ]],
                        doNotPoll: true
                    ])
                    echo "Listing contents after checkout:"
                    sh 'pwd'
                    sh 'ls -lR'
                }
            }
        }

        stage('Bump Version and Push') {
            steps {
                script {
                    def updatedModules = [
                        'SSATF/Services/TransactionGenerationAPI',
                        'SSATF/Services/DataAnalyserService',
                        'SSATF/Client_UI'
                    ]
                    def filesToCommit = [] // To store paths of modified package.json files
                    def newVersions = [:] // To store new versions for commit message

                    // Loop through each module to bump its version
                    updatedModules.each { modulePath ->
                        def pkgPath = "${modulePath}/package.json"
                        def json = readJSON file: pkgPath
                        def versionParts = json.version.tokenize('.')
                        // Increment the patch version
                        versionParts[2] = (versionParts[2] as int) + 1
                        json.version = versionParts.join('.')
                        def newVersion = json.version
                        writeJSON file: pkgPath, json: json, pretty: 4 // Write back the updated JSON

                        newVersions[modulePath] = newVersion // Store for commit message
                        filesToCommit << pkgPath // Add to list of files to commit

                        echo "üîÅ Version bumped to ${newVersion} in ${modulePath}"
                    }

                    // Perform Git operations from the repository root
                    withCredentials([usernamePassword(
                        credentialsId: '4a0363b8-3a92-4661-9c34-18f42434b7e7',
                        usernameVariable: 'GIT_USER',
                        passwordVariable: 'GIT_TOKEN'
                    )]) {
                        sh """
                            # Configure Git user for the commit
                            git config user.email "jenkins@azizsoftware.com"
                            git config user.name "Jenkins CI"

                            # Define a consistent branch name for this pipeline run
                            # Using BUILD_NUMBER for uniqueness, ensures a clean branch for each run
                            export BRANCH_NAME="Upgrade-branch"

                            # Attempt to switch to main if currently on the target branch, then delete local branch.
                            # The '|| true' ensures the step doesn't fail if the branch doesn't exist locally or if checkout fails.
                            (git checkout main && git branch -D "\${BRANCH_NAME}") || true

                            # Attempt to delete the remote branch, ignoring errors if it doesn't exist.
                            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/AzizSoftware/SSAFT_DEPLOYMENT_PIPELINE.git --delete "\${BRANCH_NAME}" || true

                            # Create and switch to the new branch
                            git checkout -b "\${BRANCH_NAME}"

                            # Add all modified package.json files relative to the workspace root
                            ${filesToCommit.collect { "git add \"${it}\"" }.join('\n')}

                            # Commit all changes. '|| true' prevents pipeline failure if no changes were made.
                            git commit -m "üîº Bump versions for pipeline run \${BUILD_NUMBER}: ${newVersions.collect { k, v -> "${k.split('/').last()}: ${v}" }.join(', ')}" || echo "No changes to commit"

                            # Push the new branch to the remote repository
                            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/AzizSoftware/SSAFT_DEPLOYMENT_PIPELINE.git "\${BRANCH_NAME}"
                        """
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "Installing dependencies in subprojects..."

                dir('SSATF/Services/DataAnalyserService') {
                    echo "Installing in DataAnalyserService"
                    sh 'npm install'
                }

                dir('SSATF/Services/TransactionGenerationAPI') {
                    echo "Installing in TransactionGenerationAPI"
                    sh 'npm install'
                }

                dir('SSATF/Client_UI') {
                    echo "Installing in Client_UI"
                    sh 'npm install'
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ CI pipeline succeeded. Triggering Test Pipeline..."
            build job: "${env.TEST_PIPELINE}", wait: true
        }
        failure {
            echo "‚ùå CI pipeline failed. Aborting further steps."
        }
    }
}
